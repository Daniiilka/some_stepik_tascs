"""Напишите функцию modify_list(l), которая принимает на вход список целых чисел, удаляет из него все нечётные значения,
а чётные нацело делит на два. Функция не должна ничего возвращать, требуется только изменение переданного списка,
например:

lst = [1, 2, 3, 4, 5, 6]
print(modify_list(lst))  # None
print(lst)               # [1, 2, 3]
modify_list(lst)
print(lst)               # [1]

lst = [10, 5, 8, 3]
modify_list(lst)
print(lst)               # [5, 4]
Функция не должна осуществлять ввод/вывод информации."""
# l = [1, 2, 3, 4, 5, 6]
#
#
# def modify_list(l):
#     new_list = []
#     for i in reversed(range(len(l))):
#         if l[i] % 2 == 0:
#             new_list.append(l[i])
#     for i in range(len(new_list)):
#         new_list[i] = int(new_list[i] // 2)
#     l[:] = [new_list]
#
#
# def another_modify_list(l):
#     for i in reversed(range(len(l))):
#         if l[i] % 2 == 0:
#             l[i] //= 2
#         else:
#             del l[i]
#
#
# modify_list(l)
# -------------------------------------------------------
# set() множества, dict, {} множества
"""Напишите функцию update_dictionary(d, key, value), которая принимает на вход словарь dd и два числа: keykey и
valuevalue.

Если ключ keykey есть в словаре dd, то добавьте значение valuevalue в список, который хранится по этому ключу.
Если ключа keykey нет в словаре, то нужно добавить значение в список по ключу 2 * key2∗key. Если и ключа 2 * key2∗key
нет, то нужно добавить ключ 2 * key2∗key в словарь и сопоставить ему список из переданного элемента [value][value].

Требуется реализовать только эту функцию, кода вне её не должно быть.
Функция не должна вызывать внутри себя функции input и print.

Пример работы функции:

d = {}
print(update_dictionary(d, 1, -1))  # None
print(d)                            # {2: [-1]}
update_dictionary(d, 2, -2)
print(d)                            # {2: [-1, -2]}
update_dictionary(d, 1, -3)
print(d)                            # {2: [-1, -2, -3]}"""

# d = {}
#
#
# def update_dictionary(d, key, value):
#     if key in d:
#         d[key] += [value]
#     elif 2*key in d:
#         d[key * 2] += [value]
#     else:
#         d[key * 2] = [value]
#
#
# print(update_dictionary(d, 1, -1))  # None
# print(d)                            # {2: [-1]}
# update_dictionary(d, 2, -2)
# print(d)                            # {2: [-1, -2]}
# update_dictionary(d, 1, -3)
# print(d)                            # {2: [-1, -2, -3]}'''

"""Когда Антон прочитал «Войну и мир», ему стало интересно, сколько слов и в каком количестве используется в этой книге.

Помогите Антону написать упрощённую версию такой программы, которая сможет подсчитать слова, разделённые пробелом и
 вывести получившуюся статистику.

Программа должна считывать одну строку со стандартного ввода и выводить для каждого уникального слова в этой строке
число его повторений (без учёта регистра) в формате "слово количество" (см. пример вывода).
Порядок вывода слов может быть произвольным, каждое уникальное слово﻿ должно выводиться только один раз."""

# list = input().lower().split()
# for i in set(list):
#     print(f"{i} {list.count(i)}")
#
"""Напишите программу, которая считывает из файла строку, соответствующую тексту, сжатому с помощью кодирования
повторов, и производит обратную операцию, получая исходный текст.

Запишите полученный текст в файл и прикрепите его, как ответ на это задание.

В исходном тексте не встречаются цифры, так что код однозначно интерпретируем.

Примечание. Это первое задание типа Dataset Quiz. В таких заданиях после нажатия "Start Quiz" у вас появляется ссылка
"download your dataset". Используйте эту ссылку для того, чтобы загрузить файл со входными данными к себе на компьютер.
 Запустите вашу программу, используя этот файл в качестве входных данных. Выходной файл, который при этом у вас
 получится, надо отправить в качестве ответа на эту задачу."""

# with open('dataset_3363_2.txt') as data:
#     di = {}
#
#     for line in data:
#         for i in range(len(line)):
#             num = ''
#             if line[i].isalpha():
#                 key = line[i]
#             elif line[i].isdigit() and line[i + 1].isdigit():
#                 num = str(line[i]) + str(line[i+1])
#
#             elif line[i].isdigit() and line[i + 1].isalpha():
#                 num = str(line[i])
#
#             di[key] = num
#
# # print(di)
# import re
# with open('dataset_3363_2 (2).txt','r+') as f:
#     a = re.split(r"(\d+)",f.readline())[:-1]
#     result = ''.join([y * int(x) for x,y in zip(a[1::2],a[::2])])
#     print(result)
#     f.seek(0)
#     f.write(result)
"""Недавно мы считали для каждого слова количество его вхождений в строку. Но на все слова может быть не так интересно
смотреть, как, например, на наиболее часто используемые.

Напишите программу, которая считывает текст из файла (в файле может быть больше одной строки) и выводит самое частое
слово в этом тексте и через пробел то, сколько раз оно встретилось. Если таких слов несколько, вывести лексикографически
первое (можно использовать оператор < для строк).

В качестве ответа укажите вывод программы, а не саму программу.

Слова, написанные в разных регистрах, считаются одинаковыми."""
# from collections import Counter
#
#
# with open('dataset_3363_3 (2).txt') as file:
#
#     c = Counter(file.read().lower().split())
#
#     print(c.most_common(1)[0][0], c.most_common(1)[0][1])

"""Имеется файл с данными по успеваемости абитуриентов. Он представляет из себя набор строк, где в каждой строке
записана следующая информация:
Фамилия;Оценка_по_математике;Оценка_по_физике;Оценка_по_русскому_языку
Поля внутри строки разделены точкой с запятой, оценки — целые числа.
Напишите программу, которая считывает исходный файл с подобной структурой и для каждого абитуриента записывает его
среднюю оценку по трём предметам на отдельной строке, соответствующей этому абитуриенту, в файл с ответом.
Также вычислите средние баллы по математике, физике и русскому языку по всем абитуриентам и добавьте полученные
значения, разделённые пробелом, последней строкой в файл с ответом.
В качестве ответа на задание прикрепите полученный файл со средними оценками по каждому ученику и одной строкой со
средними оценками по трём предметам.
Примечание. Для разбиения строки на части по символу ';' можно использовать метод split следующим образом:
print('First;Second-1 Second-2;Third'.split(';'))
# ['First', 'Second-1 Second-2', 'Third']
"""

# math, phys, rus = [], [], []
# math_sum, phys_sum, rus_sum = 0, 0, 0
#
# with open('dataset_3363_4 (3).txt', encoding='utf-8') as file:
#     for line in file:
#         var = [line.strip().split(';')]
#
#         for num in var:
#             math.append(int(num[1]))
#             phys.append(int(num[2]))
#             rus.append(int(num[3]))
#
#             with open('result', 'a') as result:
#                 mid = (int(num[1]) + int(num[2]) + int(num[3]))/3
#
#                 result.write(str(round(mid, 9)))
#                 result.write('\n')
#
#     with open('result', 'a') as result:
#         result.write(f"{round(sum(math)/len(math), 9)} {round(sum(phys)/len(phys), 9)} {round(sum(rus)/len(rus),9)}")

"""Напишите функцию matrix(), которая создает, заполняет и возвращает матрицу заданного размера. При этом
(в зависимости от переданных аргументов) она должна вести себя так:

matrix() — возвращает матрицу 1 \times 11× 1, в которой единственное число равно нулю;
matrix(n) — возвращает матрицу n \times nn× n, заполненную нулями;
matrix(n, m) — возвращает матрицу из nn строк и mm столбцов, заполненную нулями;
matrix(n, m, value) — возвращает матрицу из nn строк и mm столбцов, в которой каждый элемент равен числу value.
При создании функции пользуйтесь аргументами по умолчанию.

Примечание 1. Приведенный ниже код:

print(matrix())                   # матрица 1 × 1 из 0
print(matrix(3))                  # матрица 3 × 3 из 0
print(matrix(2, 5))               # матрица 2 × 5 из 0
print(matrix(3, 4, 9))            # матрица 3 × 4 из 9
должен выводить:

[[0]]
[[0, 0, 0], [0, 0, 0], [0, 0, 0]]
[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]
[[9, 9, 9, 9], [9, 9, 9, 9], [9, 9, 9, 9]]"""

# def matrix(row=1, col=None, el=0):
#     if col is None:
#         col = row
#     result = [[el for _ in range(col)] for _ in range(row)]
#     return result

"""Напишите функцию mean(), которая принимает произвольное количество аргументов и возвращает среднее арифметическое
переданных в нее числовых (int или float) аргументов."""
# def mean(*args):
#     result = [i for i in args if type(i) is int or type(i) is float]
#     return sum(result)/len(result) if len(result) > 0 else 0.0
#
#
# print(mean())
# print(mean(7))
# print(mean(1.5, True, ['stepik'], 'beegeek', 2.5, (1, 2)))
# print(mean(True, ['stepik'], 'beegeek', (1, 2)))
# print(mean(-1, 2, 3, 10, ('5')))
# print(mean(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))

"""Напишите функцию greet(), которая принимает произвольное количество аргументов строк имен (как минимум одно) и
возвращает приветствие в соответствии с образцом."""

# def greet(name, *args):
#     source = name.split() + list(args)
#     result = f'Hello, {" and ".join(i for i in source)}'
#     return result + '!'
#
# print(greet('Timur'))
# print(greet('Timur', 'Roman'))
# print(greet('Timur', 'Roman', 'Ruslan'))

"""Напишите функцию print_products(), которая принимает произвольное количество аргументов и выводит список продуктов
(любая непустая строка) по образцу: <номер продукта>) <название продукта> (нумерация продуктов начинается с единицы).
Если среди переданных аргументов нет ни одного продукта, необходимо вывести текст Нет продуктов."""
# def print_products(*args):
#     list_of_products = [el for el in args if type(el) is str and el != '']
#     dict_of_products = {i: list_of_products[i - 1] for i in range(1, len(list_of_products) + 1)}
#     if dict_of_products:
#         for key, value in dict_of_products.items():
#             print(f'{key}) {value}')
#     else:
#         print('Нет продуктов')
#
#
# print_products('Бананы', [1, 2], ('Stepik',), 'Яблоки', '', 'Макароны', 5, True)

"""Напишите функцию info_kwargs(), которая принимает произвольное количество именованных аргументов и печатает
именованные аргументы в соответствии с образцом: <имя аргумента>: <значение аргумента>, при этом имена аргументов
следуют в алфавитном порядке (по возрастанию)."""

# def info_kwargs(**kwargs):
#     for el, value in sorted(kwargs.items()):
#         print(f'{el}: {value}')
#
#
# info_kwargs(first_name='Timur', last_name='Guev', age=28, job='teacher')

"""Дан список numbers, содержащий кортежи чисел. Напишите программу, которая с помощью встроенных функций min() и max()
выводит те кортежи (каждый на отдельной строке), которые имеют минимальное и максимальное среднее арифметическое
значение элементов."""
# numbers = [(10, 10, 10), (30, 45, 56), (81, 39), (1, 2, 3), (12,), (-2, -4, 100), (1, 2, 99), (89, 9, 34),
#            (10, 20, 30, -2), (50, 40, 50), (34, 78, 65), (-5, 90, -1, -5), (1, 2, 3, 4, 5, 6), (-9, 8, 4),
#            (90, 1, -45, -21)]
#
#
# def comparator(el):
#     return sum(el)/len(el)
#
#
# print(min(numbers, key=comparator))
# print(max(numbers, key=comparator))


"""Напишите программу, которая сортирует список points координат точек плоскости в соответствии с расстоянием от начала
координат (точки (0; \, 0)(0;0)). Программа должна вывести отсортированный список."""

# def point(el):
#     return (el[0] ** 2 + el[1] ** 2) ** 0.5
#
#
# points = [(-1, 1), (5, 6), (12, 0), (4, 3), (0, 1), (-3, 2), (0, 0), (-1, 3), (2, 0), (3, 0), (-9, 1), (3, 6), (8, 8)]
# points.sort(key=point)
# print(points)

"""Дан список numbers, содержащий кортежи чисел. Напишите программу, которая сортирует и выводит список numbers в
соответствии с суммой минимального и максимального элемента кортежа.

Примечание 1. В этой задаче мы считаем, что кортеж (2, 1, 3)(2,1,3) меньше кортежа (6, 4, 5)(6,4,5), так как
1+3 < 4+61+3<4+6. При этом кортеж (1, 2, 9)(1,2,9) равен кортежу (4, 5, 6)(4,5,6), так как 1+9 = 4+61+9 = 4+6."""
# numbers = [(10, 10, 10), (30, 45, 56), (81, 80, 39), (1, 2, 3), (12, 45, 67), (-2, -4, 100), (1, 2, 99), (89, 90, 34), (10, 20, 30), (50, 40, 50), (34, 78, 65), (-5, 90, -1)]


# def rules(el):
#     return min(el) + max(el)
#
#
# numbers.sort(key=rules)
# print(numbers)

"""Список athletes содержит сведения о спортсменах в виде кортежей: (имя, возраст, рост, вес).

Напишите программу сортировки списка спортсменов по указанному полю:

11: по имени;
22: по возрасту;
33: по росту;
44: по весу."""

# athletes = [('Дима', 10, 130, 35), ('Тимур', 11, 135, 39), ('Руслан', 9, 140, 33), ('Рустам', 10, 128, 30),
#             ('Амир', 16, 170, 70), ('Рома', 16, 188, 100), ('Матвей', 17, 168, 68), ('Петя', 15, 190, 90)]
#
#
# def name(el, x=int(input())):
#     return el[x - 1]
#
#
# athletes.sort(key=name)
# [print(*el) for el in athletes]

"""Математические функции
Напишите программу, которая принимает число и название функции, а выводит результат применения функции к данному числу.

Список возможных функций:

квадрат: функция принимает число и возвращает его квадрат;
куб: функция принимает число и возвращает его куб;
корень: функция принимает число и возвращает корень квадратный из этого числа;
модуль: функция принимает число и возвращает его модуль;
синус: функция принимает число (в радианах) и возвращает синус этого числа."""

# import math
#
# def pwr(p):
#   def numpower(n):
#     return n**p
#   return numpower
#
# commands = {"квадрат": pwr(2), "куб": pwr(3), "корень": pwr(0.5), "модуль": abs, "синус": math.sin}

# number = int(input())
# command = commands[input()](number)
# print(command)

"""Интересная сортировка-1
На вход программе подается строка натуральных чисел. Из элементов строки формируется список чисел.

Напишите программу сортировки списка чисел в порядке неубывания суммы их цифр. При этом, если два числа имеют
одинаковую сумму цифр, следует сохранить их взаиморасположение в начальном списке."""
#
# nums = input().split()
#
#
# def comparator(num):
#     result = 0
#     for el in num:
#         result += int(el)
#     return result, int(num)
#
#
# nums.sort(key=comparator)
# print(*nums)

"""Напишите программу, которая с помощью функции map() округляет все элементы списка numbers до 22 десятичных знаков,
а затем выводит их, каждый на отдельной строке."""
# def map(function, items):
#     result = []
#     for item in items:
#         result.append(function(item))
#     return result
#
#
# def round_2(el):
#     return round(el, 2)
#
#
# numbers = [3.56773, 5.57668, 4.00914, 56.24241, 9.01344, 32.12013, 23.22222, 90.09873, 45.45, 314.1528, 2.71828, 1.41546]
#
# numbers = map(round_2, numbers)
# [print(el) for el in numbers]

"""Напишите программу, которая с помощью функций filter() и map() отбирает из заданного списка numbers трёхзначные
числа, дающие при делении на 55 остаток 22, и выводит их кубы, каждый в отдельной строке."""

# def map(function, items):
#     result = []
#     for item in items:
#         result.append(function(item))
#     return result
#
#
# def filter(function, items):
#     result = []
#     for item in items:
#         if function(item):
#             result.append(item)
#     return result
#
#
# def cube(el):
#     return el ** 3  # func for map
#
#
# def comp(el):
#     return len(str(el)) == 3 and el % 5 == 2  # func for filter
#
#
# numbers = [1014, 1321, 675, 1215, 56, 1386, 1385, 431, 1058, 486, 1434, 696, 1016, 1084, 424, 1189, 475, 95, 1434,
# 1462, 815, 776, 657, 1225, 912, 537, 1478, 1176, 544, 488, 668, 944, 207, 266, 1309, 1027, 257, 1374, 1289, 1155,
# 230, 866, 708, 144, 1434, 1163, 345, 394, 560, 338, 232, 182, 1438, 1127, 928, 1309, 98, 530, 1013, 898, 669, 105,
# 130, 1363, 947, 72, 1278, 166, 904, 349, 831, 1207, 1496, 370, 725, 926, 175, 959, 1282, 336, 1268, 351, 1439, 186,
# 273, 1008, 231, 138, 142, 433, 456, 1268, 1018, 1274, 387, 120, 340, 963, 832, 1127]
#
# numbers = filter(comp, numbers)
# print(*map(cube, numbers), sep='\n')

"""Напишите программу для вычисления и вывода суммы квадратов элементов списка numbers. Решите задачу двумя способами:
с помощью функции reduce(), и с помощью функций map() и sum()."""

# numbers = [97, 42, 9, 32, 3, 45, 31, 77, -1, 11, -2, 75, 5, 51, 34, 28, 46, 1, -8, 84, 16, 51, 90, 56, 65, 90, 23,
# 35, 11, -10, 70, 90, 90, 12, 96, 58, -8, -4, 91, 76, 94, 60, 72, 43, 4, -6, -5, 51, 58, 60, 30, 38, 67, 62, 36, 72,
# 34, 82, 62, -1, 60, 82, 87, 81, -7, 57, 26, 36, 17, 43, 80, 40, 75, 94, 91, 64, 38, 72, 29, 84, 38, 35, 7, 54, 31,
# 95, 78, 27, 82, 1, 64, 94, 31, 29, -8, 98, 24, 61, 7, 73]

# numbers = list(map(lambda x: x ** 2, numbers))
# print(sum(numbers))

# -------------------------------------------------------------------


# def reduce(operation, items, initial_value):
#     acc = initial_value
#     for item in items:
#         acc = operation(acc, item)
#     return acc
#
#
# def operation(x, y):
#     return x + y ** 2
#
#
# print(reduce(operation, numbers, 0))

"""Напишите программу для вычисления и вывода суммы квадратов двузначных чисел, которые делятся на 77 без остатка.

Примечание 1. При решении задачи используйте функции filter(), map() и sum().

Примечание 2. На 77 должно делиться исходное двузначное число, а не его квадрат.

Примечание 3. Не забывайте про отрицательные двузначные числа."""

# def square(el):
#     return el ** 2
#
#
# def comp(el):
#     return len(str(abs(el))) == 2 and el % 7 == 0
#
#
# def map(function, items):
#     result = []
#     for item in items:
#         result.append(function(item))
#     return result
#
#
# def filter(function, items):
#     result = []
#     for item in items:
#         if function(item):
#             result.append(item)
#     return result
#
#
# numbers = [77, 293, 28, 242, 213, 285, 71, 286, 144, 276, 61, 298, 280, 214, 156, 227, 228, 51, -4, 202, 58, 99, 270,
# 219, 94, 253, 53, 235, 9, 158, 49, 183, 166, 205, 183, 266, 180, 6, 279, 200, 208, 231, 178, 201, 260, -35, 152, 115,
# 79, 284, 181, 92, 286, 98, 271, 259, 258, 196, -8, 43, 2, 128, 143, 43, 297, 229, 60, 254, -9, 5, 187, 220, -8, 111,
# 285, 5, 263, 187, 192, -9, 268, -9, 23, 71, 135, 7, -161, 65, 135, 29, 148, 242, 33, 35, 211, 5, 161, 46, 159, 23, 169,
# 23, 172, 184, -7, 228, 129, 274, 73, 197, 272, 54, 278, 26, 280, 13, 171, 2, 79, -2, 183, 10, 236, 276, 4, 29, -10, 41,
# 269, 94, 279, 129, 39, 92, -63, 263, 219, 57, 18, 236, 291, 234, 10, 250, 0, 64, 172, 216, 30, 15, 229, 205, 123, -105]
#
#
# nums = filter(comp, numbers)
# print(sum(map(square, nums)))

"""Напишите функцию func_apply(), принимающую на вход функцию и список значений и возвращающую список, в котором каждое
значение будет результатом применения переданной функции к переданному списку."""

#
# def add3(x):
#     return x + 3
#
#
# def mul7(x):
#     return x * 7
#
#
# def func_apply(func, nums):
#     result = []
#     for el in nums:
#         result.append(func(el))
#     return result
#
#
# print(func_apply(mul7, [1, 2, 3, 4, 5, 6]))
# print(func_apply(add3, [1, 2, 3, 4, 5, 6]))
# print(func_apply(str, [1, 2, 3, 4, 5, 6]))


"""Напишите функцию get_middle_point(x1, y1, x2, y2), которая принимает в качестве аргументов координаты концов отрезка
и возвращает координаты точки являющейся серединой данного отрезка."""
# объявление функции
# def get_middle_point(x1, y1, x2, y2):
#     x_sol = (x1 + x2)/2
#     y_sol = (y1 + y2)/2
#     return x_sol, y_sol
#
# # считываем данные
# x_1, y_1 = int(input()), int(input())
# x_2, y_2 = int(input()), int(input())
#
# # вызываем функцию
# x, y = get_middle_point(x_1, y_1, x_2, y_2)
# print(x, y)


# # объявление функции
# def compute_binom(n, k):
#     compute = factorial(n)/(factorial(k) * factorial(n - k))
#     return int(compute)
#
# def factorial(num):
#     result = 1
#     for i in range(2, num + 1):
#         result *= i
#     return result

# считываем данные
# n = int(input())
# k = int(input())

# вызываем функцию
# print(compute_binom(n, k))


"""Магическая дата – это дата, когда день, умноженный на месяц, равен числу
образованному последними двумя цифрами года.

Напишите функцию, is_magic(date) которая принимает в качестве аргумента
строковое представление корректой даты и возвращает значение True если дата
является магической и False в противном случае."""

# # объявление функции
# def is_magic(date):
#     flag = False
#     d, m, g = map(int, date.split('.'))
#     if d * m == g % 100:
#         flag = True
#     return flag
#
# # считываем данные
# date = input()
#
# # вызываем функцию
# print(is_magic(date))


"""Ваша цель в этой ката состоит в том, чтобы реализовать разностную функцию, которая вычитает один список из
другого и возвращает результат.

Он должен удалить все значения из списка, которые присутствуют в списке, сохраняя их порядок.ab

array_diff([1,2],[1]) == [2]
Если значение присутствует в , все его вхождения должны быть удалены из другого:b

array_diff([1,2,2,2,3],[2]) == [1,3]"""

# def array_dif(a, b):
#     result = list()
#     for el in a:
#         if el not in b:
#             result.append(el)
#     return result


# print(array_dif([1,2,2,2,3],[2]))


"""Комплексные числа хранятся в списке numbers. Дополните приведенный код так, чтобы он вывел комплексное число с
наибольшим модулем и сам модуль числа на отдельных строках."""
# numbers = [3 + 4j, 3 + 1j, -7 + 3j, 4 + 8j, -8 + 10j, -3 + 2j, 3 - 2j, -9 + 9j, -1 - 1j, -1 - 10j, -20 + 15j,
# -21 + 1j, 1j, -3 + 8j, 4 - 6j, 8 + 2j, 2 + 3j]

# abs_of_numbers = [abs(num) for num in numbers]
# i = abs_of_numbers.index(max(abs_of_numbers))
# print(numbers[i], max(abs_of_numbers), sep='\n')


# n, z1, z2 = int(input()), complex(input()), complex(input())
# result = z1 ** n + z2 ** n + z1.conjugate() ** n + z2.conjugate() ** (n + 1)
# print(result)

"""Последовательность Трибоначчи
Напишите программу, которая считывает натуральное число nn и выводит первые nn чисел последовательности Трибоначчи."""

# def freebonachi(n):
#     a, b, c = 1, 1, 1
#     for i in range(n):
#         yield a
#         a, b, c = b, c, a + b + c
#
#
# result = freebonachi(int(input()))
# [print(re, end=' ') for re in result]

"""Напишите реализацию функции closest_mod_5, принимающую в качестве единственного аргумента целое число x и
возвращающую самое маленькое целое число y, такое что:

y больше или равно x
y делится нацело на 5"""


# def closest_mod_5(x):
#     result = x
#     while result % 5 != 0:
#         result += 1
#     return result


"""
Сочетанием из n элементов по k называется подмножество этих n элементов размера k.
Два сочетания называются различными, если одно из сочетаний содержит элемент, который не содержит другое.
Числом сочетаний из n по k называется количество различных сочетаний из n по k. Обозначим это число за C(n, k).
Реализуйте программу, которая для заданных n и k вычисляет C(n, k).
"""


# def c(n, k):
#     if k == 0:
#         return 1
#     elif k > n:
#         return 0
#     else:
#         return c(n - 1, k) + c(n - 1, k - 1)
#
#
# n, k = map(int, input().split())
# print(c(n, k))

"""Реализуйте программу, которая будет эмулировать работу с пространствами имен. Необходимо реализовать поддержку
создания пространств имен и добавление в них переменных.

В данной задаче у каждого пространства имен есть уникальный текстовый идентификатор – его имя.

Вашей программе на вход подаются следующие запросы:

- create <namespace> <parent> –  создать новое пространство имен с именем <namespace> внутри пространства <parent>
- add <namespace> <var> – добавить в пространство <namespace> переменную <var>
- get <namespace> <var> – получить имя пространства, из которого будет взята переменная <var> при запросе из
пространства
- <namespace>, или None, если такого пространства не существует

Результатом запроса get будет имя пространства, из которого будет взята нужная переменная.
Например, результатом запроса get foo a будет global, потому что в пространстве foo не объявлена переменная a, но в
пространстве global, внутри которого находится пространство foo, она объявлена. Аналогично, результатом запроса get bar
b будет являться foo, а результатом работы get bar a будет являться bar.

Более формально, результатом работы get <namespace> <var> является

- <namespace>, если в пространстве <namespace> была объявлена переменная <var>
- get <parent> <var> – результат запроса к пространству, внутри которого было создано пространство <namespace>, если
переменная не была объявлена
- None, если не существует <parent>, т. е. <namespace>﻿ – это global"""


# namespaces = {
#     'global': {
#         'variables': [],
#         'parent': None
#     }
# }
#
#
# def create(namespace, parent):
#     namespaces[namespace] = {
#         'variables': [],
#         'parent': parent
#     }
#
#
# def add(namespace, var):
#     namespaces[namespace]['variables'].append(var)
#
#
# def get(namespace, var):
#     if var in namespaces[namespace]['variables']:
#         print(namespace)
#     elif namespace != 'global':
#         return get(namespaces[namespace]['parent'], var)
#     else:
#         print(None)
#
#
# for _ in range(int(input())):
#     operation, namespace, arg = input().split()
#     eval(operation)(namespace, arg)
