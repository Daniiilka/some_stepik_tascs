"""–ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è—é—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ—á–∫–∏ 'a' –∏ 'b' –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∞–º–∏"""
# def is_permutation(a: str, b: str) -> bool:
#
#     if sorted(a) == sorted(b):
#         return True
#     else:
#         return False
#
#
#
# print(is_permutation("abbba", "abab"))
# assert is_permutation("baba", "abab")  # True
# assert is_permutation("abbba", "abab")  # False

"""–ü–∞—Ä–æ–ª—å —è–≤–ª—è–µ—Ç—Å—è –Ω–∞–¥–µ–∂–Ω—ã–º –µ—Å–ª–∏:

–µ–≥–æ –¥–ª–∏–Ω–∞ –Ω–µ –º–µ–Ω–µ–µ 88 —Å–∏–º–≤–æ–ª–æ–≤;
–æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∞–∫ –º–∏–Ω–∏–º—É–º –æ–¥–Ω—É –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É (–≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä);
–æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∞–∫ –º–∏–Ω–∏–º—É–º –æ–¥–Ω—É —Å—Ç—Ä–æ—á–Ω—É—é –±—É–∫–≤—É (–Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä);
–æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É."""

# def is_password_good(password):
#     pas_upper, pas_lower, pas_digit, pass_result = False, False, False, False
#     if len(password) >= 8:
#         for symbol in password:
#             if symbol.isalpha():
#                 if symbol == symbol.upper():
#                     pas_upper = True
#                 if symbol == symbol.lower():
#                     pas_lower = True
#             if symbol.isdigit():
#                 pas_digit = True
#             if pas_digit == True and pas_lower == True and pas_upper == True:
#                 pass_result = True
#                 break
#     return pass_result
#
#
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# txt = input()
#
# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# print(is_password_good(txt))


"""–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_one_away(word1, word2), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–≤–∞
—Å–ª–æ–≤–∞ word1 –∏ word2 –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True –µ—Å–ª–∏ —Å–ª–æ–≤–∞ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—É—é –¥–ª–∏–Ω—É –∏ –æ
—Ç–ª–∏—á–∞—é—Ç—Å—è —Ä–æ–≤–Ω–æ –≤ 1 —Å–∏–º–≤–æ–ª–µ –∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ."""

# # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def is_one_away(word1, word2):
#     count = 0
#     if len(word1) == len(word2):
#         for i in range(len(word1)):
#             if word1[i] != word2[i]:
#                 count += 1
#     if count == 1:
#         return True
#     else:
#         return False
#
#
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# txt1 = input()
# txt2 = input()
#
# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# print(is_one_away(txt1, txt2))

# # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø–∞–ª–∏–Ω–¥—Ä–æ–º
# def is_palindrome(text):
#     text = ''.join(i for i in text if i.isalpha())
#     return text.lower() == text[::-1].lower()
#
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# txt = input()
#
# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# print(is_palindrome(txt))

"""a:b:c, –≥–¥–µ a, b –∏ c ‚Äì –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–∞

—á–∏—Å–ª–æ a ‚Äì –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º;
—á–∏—Å–ª–æ b ‚Äì –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–æ—Å—Ç—ã–º;
—á–∏—Å–ª–æ c ‚Äì –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–µ—Ç–Ω—ã–º."""
# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def is_valid_password(password):
#     palindrome, simple, even = False, False, False
#     password = password.split(':')
#     if len(password) == 3:
#         if password[0] == password[0][::-1]:
#             palindrome = True
#         d = 2
#         while d * d <= int(password[1]) and int(password[1]) % d != 0:
#             d += 1
#         if d * d > int(password[1]):
#             simple = True
#         if int(password[2]) % 2 == 0:
#             even = True
#     return palindrome and simple and even
#
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# psw = input()
#
# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# print(is_valid_password(psw))

"""–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_correct_bracket(text), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ
–∞—Ä–≥—É–º–µ–Ω—Ç–∞ –Ω–µ–ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É text, —Å–æ—Å—Ç–æ—è—â—É—é –∏–∑ —Å–∏–º–≤–æ–ª–æ–≤ ( –∏ ) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ
True –µ—Å–ª–∏ –ø–æ—Å—Ç—É–ø–∏–≤—à–∞—è –Ω–∞ –≤—Ö–æ–¥ —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–∫–æ–±–æ—á–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
–∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ."""

# # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def is_correct_bracket(text):
#     while '()' in text:
#         text = text.replace('()', '')
#     return True if len(text) == 0 else False
#
#
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# txt = input()
#
# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# print(is_correct_bracket(txt))
"""–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é convert_to_python_case(text), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤
–∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Å—Ç—Ä–æ–∫—É –≤ ¬´–≤–µ—Ä–±–ª—é–∂—å–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ¬ª –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç
–µ–≥–æ –≤ ¬´–∑–º–µ–∏–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä¬ª."""
# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏


# def convert_to_python_case(text):
#     result = ''
#
#     for i in text:
#         if i.isupper():
#             result += '_' + i.lower()
#         else:
#             result += i
#     return result[1::]
#
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# txt = input()
#
# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# print(convert_to_python_case(txt))

"""–ü–∞–Ω–≥—Ä–∞–º–º–∞ ‚Äì —ç—Ç–æ —Ñ—Ä–∞–∑–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è –≤ —Å–µ–±–µ –≤—Å–µ –±—É–∫–≤—ã –∞–ª—Ñ–∞–≤–∏—Ç–∞. –û–±—ã—á–Ω–æ
–ø–∞–Ω–≥—Ä–∞–º–º—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –¥–ª—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ —à—Ä–∏—Ñ—Ç–æ–≤, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –≤ –æ–¥–Ω–æ–π —Ñ—Ä–∞–∑–µ
—Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –≥–ª–∏—Ñ—ã.

–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, is_pangram(text) –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Å—Ç—Ä–æ–∫—É
—Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —è–≤–ª—è–µ—Ç—Å—è –ø–∞–Ω–≥—Ä–∞–º–º–æ–π
 –∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ."""

# # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def is_pangram(text):
#     flag = True
#     for i in range(97, 123):
#         if chr(i) not in text.lower():
#             flag = False
#             break
#     return flag
#
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# text = input()
#
# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# print(is_pangram(text))


"""–ö—Ä–µ–º–Ω–∏–µ–≤–∞—è –¥–æ–ª–∏–Ω–∞ üå∂Ô∏èüå∂Ô∏è
–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –ê–Ω—Ç–æ–Ω, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ì–∏–ª—Ñ–æ–π–ª–æ–º, –≤–∑–ª–æ–º–∞–ª —Å–µ—Ç—å —É–º–Ω—ã—Ö —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–æ–≤. –¢–µ–ø–µ—Ä—å –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏—Ö –≤
–∫–∞—á–µ—Å—Ç–≤–µ —Å–µ—Ä–≤–µ—Ä–æ–≤ "–ü–µ–≥–æ–≥–æ –¥—É–¥–æ—á–Ω–∏–∫–∞". –ü–æ–º–æ–≥–∏—Ç–µ –≤–ª–∞–¥–µ–ª—å—Ü—É —Ñ–∏—Ä–º—ã –æ—Ç—ã—Å–∫–∞—Ç—å –≤—Å–µ –∑–∞—Ä–∞–∂–µ–Ω–Ω—ã–µ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∏.

–î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏, —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑ —Å—Ç—Ä–æ—á–Ω—ã—Ö –±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä, –∏ –µ—Å–ª–∏ –≤ –Ω–µ–π
–ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–ª–æ–≤–æ "anton" (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä—è–¥–æ–º —Å—Ç–æ—è—â–∏–µ –±—É–∫–≤—ã, –≥–ª–∞–≤–Ω–æ–µ –Ω–∞–ª–∏—á–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±—É–∫–≤), —Ç–æ
—Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫ –∑–∞—Ä–∞–∂–µ–Ω –∏ –Ω—É–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞, –Ω—É–º–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –µ–¥–∏–Ω–∏—Ü—ã"""
# result = 0
# for _ in range(int(input())):
#     result += 1
#     string = input()
#     count = 0
#     for i in 'anton':
#         if i in string:
#             count += 1
#             string = string[string.find(i):]
#     if count == 5:
#         print(result, end=' ')


"""–í–∞—à–µ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ –Ω–∞ –≤—Ö–æ–¥ –ø–æ–¥–∞—é—Ç—Å—è —Ç—Ä–∏ —Å—Ç—Ä–æ–∫–∏ s, a, b, —Å–æ—Å—Ç–æ—è—â–∏–µ –∏–∑ —Å—Ç—Ä–æ—á–Ω—ã—Ö –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤.
–ó–∞ –æ–¥–Ω—É –æ–ø–µ—Ä–∞—Ü–∏—é –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ a –≤ —Å—Ç—Ä–æ–∫—É s –Ω–∞ —Å—Ç—Ä–æ–∫—É b.

–ù–∞–ø—Ä–∏–º–µ—Ä, s = "abab", a = "ab", b = "ba", —Ç–æ–≥–¥–∞ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–¥–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫–∞ s –ø–µ—Ä–µ–π–¥–µ—Ç –≤ —Å—Ç—Ä–æ–∫—É "baba",
–ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–≤—É—Ö –∏ –æ–ø–µ—Ä–∞—Ü–∏–π ‚Äì –≤ —Å—Ç—Ä–æ–∫—É "bbaa", –∏ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ –±—É–¥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å —Å—Ç—Ä–æ–∫—É s.

–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∑–Ω–∞—Ç—å, –ø–æ—Å–ª–µ –∫–∞–∫–æ–≥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–ø–µ—Ä–∞—Ü–∏–π –≤ —Å—Ç—Ä–æ–∫–µ s –Ω–µ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤—Ö–æ–∂–¥–µ–Ω–∏–π —Å—Ç—Ä–æ–∫–∏ a. –ï—Å–ª–∏
–ø–µ—Ä–∞—Ü–∏–π –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –±–æ–ª–µ–µ 1000, –≤—ã–≤–µ–¥–∏—Ç–µ Impossible.

–í—ã–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ —á–∏—Å–ª–æ ‚Äì –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –æ–ø–µ—Ä–∞—Ü–∏–π, –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã—Ö –≤ —Å—Ç—Ä–æ–∫–µ s –Ω–µ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤—Ö–æ–∂–¥–µ–Ω–∏–π —Å—Ç—Ä–æ–∫–∏ a,
–∏–ª–∏ Impossible, –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –±–æ–ª–µ–µ 1000."""

# if __name__ == '__main__':
#     counter = 0
#     s, a, b = (input() for _ in range(3))
#     while a in s:
#         s = s.replace(a, b)
#         counter += 1
#         if counter > 1000:
#             counter = 'impossible'
#             break
#     print(counter)

"""–í–∞—à–µ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ –Ω–∞ –≤—Ö–æ–¥ –ø–æ–¥–∞—é—Ç—Å—è –¥–≤–µ —Å—Ç—Ä–æ–∫–∏ s –∏ t, —Å–æ—Å—Ç–æ—è—â–∏–µ –∏–∑ —Å—Ç—Ä–æ—á–Ω—ã—Ö –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤.

–í—ã–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ —á–∏—Å–ª–æ ‚Äì –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–∂–¥–µ–Ω–∏–π —Å—Ç—Ä–æ–∫–∏ t –≤ —Å—Ç—Ä–æ–∫—É s.

–ü—Ä–∏–º–µ—Ä:
s = "abababa"
t = "aba"
"""

# `if __name__ == '__main__':
#     s, t = input(), input()
#     counter = 0
#     for i in range(len(s) + 1):
#         if s.startswith(t, i):
#             counter += 1
#
#     print(counter)`
