"""–¢—Ä–µ–±–æ–≤–∞–ª–æ—Å—å –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è:

–ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–ø–∏—Å–æ–∫ floats –≤ —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª, –≤–æ–∑–≤–µ–¥–µ–Ω–Ω—ã—Ö –≤ –∫–≤–∞–¥—Ä–∞—Ç –∏ –æ–∫—Ä—É–≥–ª–µ–Ω–Ω—ã—Ö —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ –æ–¥–Ω–æ–≥–æ –¥–µ—Å—è—Ç–∏—á–Ω–æ–≥–æ –∑–Ω–∞–∫–∞;
—Ñ–∏–ª—å—Ç—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ words  –∏ –æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –ø–∞–ª–∏–Ω–¥—Ä–æ–º—ã –¥–ª–∏–Ω–æ–π –±–æ–ª–µ–µ 44 —Å–∏–º–≤–æ–ª–æ–≤;
–Ω–∞—Ö–æ–¥–∏—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —á–∏—Å–µ–ª –∏–∑ —Å–ø–∏—Å–∫–∞ numbers.
–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç —Ç–æ—Ä–æ–ø–∏–ª—Å—è –∏ –Ω–∞–ø–∏—Å–∞–ª –ø—Ä–æ–≥—Ä–∞–º–º—É –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –î–æ—Ä–∞–±–æ—Ç–∞–π—Ç–µ –µ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º—É."""

# from functools import reduce
#
# floats = [4.35, 6.09, 3.25, 9.77, 2.16, 8.88, 4.59, 34.23, 12.12, 4.67, 2.45, 9.32]
# words = ['racecar', 'akinremi', 'deed', 'temidayo', 'omoseun', 'civic', 'TATTARRATTAT', 'malayalam', 'nun']
# numbers = [4, 6, 9, 23, 5]
#
# # –ò—Å–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥
# map_result = list(map(lambda num: round(num ** 2, 1), floats))
# filter_result = list(filter(lambda name: name == name[::-1] and len(name) > 4, words))
# reduce_result = reduce(lambda num1, num2: num1 * num2, numbers, 1)
#
# print(map_result)
# print(filter_result)
# print(reduce_result)


"""–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å –ø–æ–º–æ—â—å—é –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π filter(), map(), sorted() –∏ reduce() –≤—ã–≤–æ–¥–∏—Ç –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º
–ø–æ—Ä—è–¥–∫–µ —Å–ø–∏—Å–æ–∫ primary –≥–æ—Ä–æ–¥–æ–≤ —Å –Ω–∞—Å–µ–ª–µ–Ω–∏–µ–º –±–æ–ª–µ–µ 10 000 000 —á–µ–ª–æ–≤–µ–∫, –≤ —Ñ–æ—Ä–º–∞—Ç–µ:

Cities: Beijing, Buenos Aires, ..."""

# from functools import reduce
#
# data = [['Tokyo', 35676000, 'primary'],
#         ['New York', 19354922, 'nan'],
#         ['Mexico City', 19028000, 'primary'],
#         ['Mumbai', 18978000, 'admin'],
#         ['Sao Paulo', 18845000, 'admin'],
#         ['Delhi', 15926000, 'admin'],
#         ['Shanghai', 14987000, 'admin'],
#         ['Kolkata', 14787000, 'admin'],
#         ['Los Angeles', 12815475, 'nan'],
#         ['Dhaka', 12797394, 'primary'],
#         ['Buenos Aires', 12795000, 'primary'],
#         ['Karachi', 12130000, 'admin'],
#         ['Cairo', 11893000, 'primary'],
#         ['Rio de Janeiro', 11748000, 'admin'],
#         ['Osaka', 11294000, 'admin'],
#         ['Beijing', 11106000, 'primary'],
#         ['Manila', 11100000, 'primary'],
#         ['Moscow', 10452000, 'primary'],
#         ['Istanbul', 10061000, 'admin'],
#         ['Paris', 9904000, 'primary']]
#
# sorted_cities = list(filter(lambda el: el[1] > 10000000 and el[2] == 'primary', data))
# names_of_cities = sorted(list(map(lambda el: el[0], sorted_cities)))
# result = reduce(lambda x, y: x + ', ' + y, names_of_cities)
#
# print('Cities: ' + result)

"""–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é func, –∏—Å–ø–æ–ª—å–∑—É—è —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
–∑–Ω–∞—á–µ–Ω–∏–µ True, –µ—Å–ª–∏ –æ–Ω –¥–µ–ª–∏—Ç—Å—è –±–µ–∑ –æ—Å—Ç–∞—Ç–∫–∞ –Ω–∞ 1919 –∏–ª–∏ –Ω–∞ 1313 –∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ."""

# func = lambda el: el % 19 == 0 or el % 13 == 0

# is_non_negative_num = lambda x: True if x in '.0123456789' and x.count('.') < 2 and not x.startswith('-') else False

# is_num = lambda s: '-' not in s[1:] and s.count('.') <= 1 and set(s) <= set('-.1234567890')
#
# print(is_num('10.34ab'))
# print(is_num('10.45'))
# print(is_num('-18'))
# print(is_num('-34.67'))
# print(is_num('987'))
# print(is_num('abcd'))
# print(is_num('123.122.12'))
# print(is_num('-123.122'))
# print(is_num('--13.2'))
"""–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å –ø–æ–º–æ—â—å—é –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π map() –∏ filter() —É–¥–∞–ª—è–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ numbers –≤—Å–µ –Ω–µ—á–µ—Ç–Ω—ã–µ
—ç–ª–µ–º–µ–Ω—Ç—ã, –±–æ–ª—å—à–∏–µ 4747, –∞ –≤—Å–µ —á–µ—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞—Ü–µ–ª–æ –¥–µ–ª–∏—Ç –Ω–∞ –¥–≤–∞ (—Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ ‚Äì //). –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ —á–∏—Å–ª–∞
—Å–ª–µ–¥—É–µ—Ç –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, —Ä–∞–∑–¥–µ–ª–∏–≤ —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–∏–≤ –∏—Å—Ö–æ–¥–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫. """
# numbers = [46, 61, 34, 17, 56, 26, 93, 1, 3, 82, 71, 37, 80, 27, 77, 94, 34, 100, 36, 81, 33, 81, 66, 83, 41, 80,
# 80, 93, 40, 34, 32, 16, 5, 16, 40, 93, 36, 65, 8, 19, 8, 75, 66, 21, 72, 32, 41, 59, 35, 64, 49, 78, 83, 27, 57,
# 53, 43, 35, 48, 17, 19, 40, 90, 57, 77, 56, 80, 95, 90, 27, 26, 6, 4, 23, 52, 39, 63, 74, 15, 66, 29, 88, 94, 37,
# 44, 2, 38, 36, 32, 49, 5, 33, 60, 94, 89, 8, 36, 94, 46, 33]
#
# numbers = filter(lambda x: x if x <= 47 else x % 2 == 0, numbers)
# numbers = map(lambda x: x // 2 if x % 2 == 0 else x, numbers)
# print(*numbers)

"""–°–ø–∏—Å–æ–∫ data —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞—Å–µ–ª–µ–Ω–∏—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —à—Ç–∞—Ç–æ–≤ –°–®–ê. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ
—É–±—ã–≤–∞–Ω–∏—é —Å–ø–∏—Å–∫–∞ data –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏–º–≤–æ–ª–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —à—Ç–∞—Ç–∞. –ó–∞—Ç–µ–º —Ä–∞—Å–ø–µ—á–∞—Ç–∞–π—Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞,
–∫–∞–∂–¥—ã–π –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:

<–Ω–∞–∑–≤–∞–Ω–∏–µ —à—Ç–∞—Ç–∞>: <—á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞—Å–µ–ª–µ–Ω–∏—è>

Vermont: 626299
Massachusetts: 7029917
..."""
# data = [(19542209, 'New York'), (4887871, 'Alabama'), (1420491, 'Hawaii'), (626299, 'Vermont'),
#         (1805832, 'West Virginia'), (39865590, 'California'), (11799448, 'Ohio'), (10711908, 'Georgia'),
#         (10077331, 'Michigan'), (10439388, 'Virginia'), (7705281, 'Washington'), (7151502, 'Arizona'),
#         (7029917, 'Massachusetts'), (6910840, 'Tennessee')]
#
#
# data.sort(key=lambda x: x[1][-1], reverse=True)
# [print(f'{el[1]}: {el[0]}') for el in data]

"""–°–ø–∏—Å–æ–∫ data —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –µ–≥–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –¥–ª–∏–Ω—ã —Å–ª–æ–≤, –∞ –∑–∞—Ç–µ–º –≤
–ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ. –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ —Å–ª–µ–¥—É–µ—Ç –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, —Ä–∞–∑–¥–µ–ª–∏–≤ —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞."""
# data = ['–≥–æ–¥', '—á–µ–ª–æ–≤–µ–∫', '–≤—Ä–µ–º—è', '–¥–µ–ª–æ', '–∂–∏–∑–Ω—å', '–¥–µ–Ω—å', '—Ä—É–∫–∞', '—Ä–∞–∑', '—Ä–∞–±–æ—Ç–∞', '—Å–ª–æ–≤–æ', '–º–µ—Å—Ç–æ', '–ª–∏—Ü–æ', '–¥—Ä—É–≥',
#         '–≥–ª–∞–∑', '–≤–æ–ø—Ä–æ—Å', '–¥–æ–º', '—Å—Ç–æ—Ä–æ–Ω–∞', '—Å—Ç—Ä–∞–Ω–∞', '–º–∏—Ä', '—Å–ª—É—á–∞–π', '–≥–æ–ª–æ–≤–∞', '—Ä–µ–±–µ–Ω–æ–∫', '—Å–∏–ª–∞', '–∫–æ–Ω–µ—Ü', '–≤–∏–¥',
#         '—Å–∏—Å—Ç–µ–º–∞', '—á–∞—Å—Ç—å', '–≥–æ—Ä–æ–¥', '–æ—Ç–Ω–æ—à–µ–Ω–∏–µ', '–∂–µ–Ω—â–∏–Ω–∞', '–¥–µ–Ω—å–≥–∏']
# data.sort()
# data.sort(key=lambda x: len(x))
# print(*data)


"""–°–ø–∏—Å–æ–∫ mixed_list —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–µ –∏ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å –ø–æ–º–æ—â—å—é –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π
—Ñ—É–Ω–∫—Ü–∏–∏ max() –Ω–∞—Ö–æ–¥–∏—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç –Ω–∞–∏–±–æ–ª—å—à–µ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –î–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–Ω–æ–Ω–∏–º–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç key  —Ñ—É–Ω–∫—Ü–∏–∏ max()."""
# mixed_list = ['tuesday', 'abroad', 'abuse', 'beside', 'monday', 'abate', 'accessory', 'absorb', 1384878, 'sunday',
# 'about', 454805, 'saturday', 'abort', 2121919, 2552839, 977970, 1772933, 1564063, 'abduct', 901271, 2680434,
# 'bicycle', 'accelerate', 1109147, 942908, 'berry', 433507, 'bias', 'bestow', 1875665, 'besides', 'bewilder',
# 1586517, 375290, 1503450, 2713047, 'abnormal', 2286106, 242192, 701049, 2866491, 'benevolent', 'bigot', 'abuse',
# 'abrupt', 343772, 'able', 2135748, 690280, 686008, 'beyond', 2415643, 'aboard', 'bet', 859105, 'accident', 2223166,
# 894187, 146564, 1251748, 2851543, 1619426, 2263113, 1618068, 'berth', 'abolish', 'beware', 2618492, 1555062,
# 'access', 'absent', 'abundant', 2950603, 'betray', 'beverage', 'abide', 'abandon', 2284251, 'wednesday', 2709698,
# 'thursday', 810387, 'friday', 2576799, 2213552, 1599022, 'accept', 'abuse', 'abound', 1352953, 'bid', 1805326,
# 1499197, 2241159, 605320, 2347441]
#
# print(max(mixed_list, key=lambda x: x if str(x).isdigit() else 0))

"""–°–ø–∏—Å–æ–∫ mixed_list —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–µ –∏ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –µ–≥–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –Ω–µ—É–±—ã–≤–∞–Ω–∏—é
–∑–Ω–∞—á–µ–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –ø—Ä–∏ —ç—Ç–æ–º —á–∏—Å–ª–∞ –¥–æ–ª–∂–Ω—ã —Å–ª–µ–¥–æ–≤–∞—Ç—å –¥–æ —Å—Ç—Ä–æ–∫.  –≠–ª–µ–º–µ–Ω—Ç—ã –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –≤—ã–≤–µ–¥–∏—Ç–µ –Ω–∞ –æ–¥–Ω–æ–π
—Å—Ç—Ä–æ–∫–µ, —Ä–∞–∑–¥–µ–ª–∏–≤ —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞."""
# mixed_list = ['a', 'ab', 3, 5, 1, 8, 0, 'c', 'ac', 'aab']
# mixed_list.sort(key=lambda x: (type(x) == str, x))
# print(*mixed_list)
"""–ü—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π —Ü–≤–µ—Ç
–í —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º–µ RGB —Ü–≤–µ—Ç–∞ –∑–∞–¥–∞—é—Ç—Å—è —Å –ø–æ–º–æ—â—å—é —Ç—Ä–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:

R ‚Äî –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –∫—Ä–∞—Å–Ω–æ–π —Å–æ—Å—Ç–∞–≤–ª—è—é—â–µ–π —Ü–≤–µ—Ç–∞;
G ‚Äî –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –∑–µ–ª–µ–Ω–æ–π —Å–æ—Å—Ç–∞–≤–ª—è—é—â–µ–π —Ü–≤–µ—Ç–∞;
B ‚Äî –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —Å–∏–Ω–µ–π —Å–æ—Å—Ç–∞–≤–ª—è—é—â–µ–π —Ü–≤–µ—Ç–∞.
–ü—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ —Ü–≤–µ—Ç–∞ –∑–∞–¥–∞—é—Ç—Å—è –∫–∞–∫ RGB –∏ (255-R)(255-G)(255-B). –°—á–∏—Ç–∞–µ—Ç—Å—è, —á—Ç–æ —Ç–∞–∫–∏–µ —Ü–≤–µ—Ç–∞ —Ö–æ—Ä–æ—à–æ –≥–∞—Ä–º–æ–Ω–∏—Ä—É—é—Ç –¥—Ä—É–≥ —Å
–¥—Ä—É–≥–æ–º.

–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ —Ç—Ä–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞, –Ω–∞—Ö–æ–¥–∏—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞. """
# rgb = [int(i) for i in input().split()]
# print(*map(lambda x: abs(255 - x), rgb))

"""–ó–Ω–∞—á–µ–Ω–∏–µ –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞ üå∂Ô∏è
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –ø–æ–¥–∞—é—Ç—Å—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞ –∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ xx –Ω–∞
 —Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã—á–∏—Å–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞ –ø—Ä–∏ –∑–∞–¥–∞–Ω–Ω–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏ xx."""
# from functools import reduce
#
#
# def evaluate(coefficients, x):
#     result = list(map(lambda num, n: num * (x ** n), coefficients, range(len(coefficients) - 1, -1, -1)))
#     r = reduce(lambda x, y: x + y, result)
#     return r
#
#
# c = [int(i) for i in input().split()]
# n = int(input())
# print(evaluate(c, n))

"""–†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é mod_checker(x, mod=0), –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ª—è–º–±–¥–∞ —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç –æ–¥–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ y,
–∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å True, –µ—Å–ª–∏ –æ—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è y –Ω–∞ x —Ä–∞–≤–µ–Ω mod, –∏ False –∏–Ω–∞—á–µ.
"""


# def mod_checker(x, mod=0):
#     return lambda y: y % x == mod
#
#
# mod_3 = mod_checker(3)
#
# print(mod_3(3)) # True
# print(mod_3(4)) # False
#
# mod_3_1 = mod_checker(3, 1)
# print(mod_3_1(4)) # True

"""
–†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ partial –∏ –µ–µ –∞–Ω–∞–ª–æ–≥–∞ –Ω–∞ lambda
"""
# from functools import partial
# from util import hyperbola
#
# if __name__ == '__main__':
#     x_values = range(0, 100)
#
#     res = list(map(lambda el: hyperbola(el, 100), x_values))
#     print(res)
#
#     res_partial = list(map(partial(hyperbola, y=100), x_values))
#     print(res_partial)
